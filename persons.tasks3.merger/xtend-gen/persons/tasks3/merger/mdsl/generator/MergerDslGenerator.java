/**
 * generated by Xtext 2.25.0
 */
package persons.tasks3.merger.mdsl.generator;

import java.io.IOException;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.nodemodel.BidiTreeIterator;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.xbase.lib.Exceptions;
import persons.tasks3.merger.mdsl.MergerDslStandaloneSetup;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MergerDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    System.out.println("----------------------------------ting tong--------------------------------------------------------------- ");
    new MergerDslStandaloneSetup().createInjectorAndDoEMFRegistration();
    final ResourceSetImpl rs = new ResourceSetImpl();
    final Resource r = rs.getResource(URI.createURI("platform:/resource/persons.tasks.merger/merger/merger.mdsl"), true);
    System.out.println("---3");
    final EObject eobject = r.getContents().get(0);
    final ICompositeNode node = NodeModelUtils.getNode(eobject);
    String _text = node.getText();
    String _plus = ("first child Nodes.......................................................:  " + _text);
    System.out.println(_plus);
    new MergerDslStandaloneSetup().createInjectorAndDoEMFRegistration();
    final ResourceSetImpl rs2 = new ResourceSetImpl();
    final Resource r2 = rs2.getResource(URI.createURI("platform:/resource/persons.tasks.merger/merger/merger2.mdsl"), true);
    System.out.println("---3");
    final EObject eobject2 = r2.getContents().get(0);
    final ICompositeNode node2 = NodeModelUtils.getNode(eobject2);
    String _text_1 = node2.getText();
    String _plus_1 = ("first child Nodes2.......................................................:  " + _text_1);
    System.out.println(_plus_1);
    final Resource r3 = rs2.getResource(URI.createURI("platform:/resource/persons.tasks.merger/merger3/merger3.mdsl"), true);
    System.out.println("---3");
    final EObject eobject3 = r3.getContents().get(0);
    final ICompositeNode node3 = NodeModelUtils.getNode(eobject3);
    String _text_2 = node3.getText();
    String _plus_2 = ("first child Nodes3.......................................................:  " + _text_2);
    System.out.println(_plus_2);
    final Resource r4 = rs2.getResource(URI.createURI("platform:/resource/persons.tasks.merger2/merger4/merger4.mdsl"), true);
    System.out.println("---3");
    final EObject eobject4 = r4.getContents().get(0);
    final ICompositeNode node4 = NodeModelUtils.getNode(eobject4);
    String _text_3 = node4.getText();
    String _plus_3 = ("first child Nodes4.......................................................:  " + _text_3);
    System.out.println(_plus_3);
    final BidiTreeIterator<INode> a = node.getAsTreeIterable().iterator();
    final BidiTreeIterator<INode> a3 = node3.getAsTreeIterable().iterator();
    final INode o = a.next();
    final INode o3 = a3.next();
    String _text_4 = o.getText();
    String _plus_4 = ("next element in a tree:.......................................... " + _text_4);
    System.out.println(_plus_4);
    final String nodeAsString = Strings.convertToJavaString(o3.getText(), true);
    System.out.println(("nodeAsString:" + nodeAsString));
    final int startIndex = nodeAsString.indexOf("\\r");
    System.out.println(("startIndex:" + Integer.valueOf(startIndex)));
    final int endIndex = nodeAsString.length();
    System.out.println(("endIndex:" + Integer.valueOf(endIndex)));
    final String newString = nodeAsString.substring((startIndex + 4), endIndex).replace("\\r", "").replace("\\n", "\n");
    System.out.println(("newString:" + newString));
    String _text_5 = o.getText();
    final String text = (_text_5 + newString);
    final int offset = node4.getOffset();
    final int length = node4.getLength();
    System.out.println(("length:" + Integer.valueOf(length)));
    System.out.println(("offset:" + Integer.valueOf(offset)));
    System.out.println(("text:" + text));
    final XtextResource resource1 = ((XtextResource) r4);
    resource1.update(offset, length, text);
    try {
      r4.save(SaveOptions.newBuilder().noValidation().getOptions().toOptionsMap());
    } catch (final Throwable _t) {
      if (_t instanceof IOException) {
        System.out.println("EXCEPTION RAISE ON SERIALIZATION");
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
  }
}
