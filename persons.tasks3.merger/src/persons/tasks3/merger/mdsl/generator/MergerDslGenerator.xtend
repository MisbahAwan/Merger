/*
 * generated by Xtext 2.25.0
 */
package persons.tasks3.merger.mdsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.common.util.URI
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import persons.tasks3.merger.mdsl.MergerDslStandaloneSetup
import org.eclipse.xtext.resource.XtextResource
import org.eclipse.xtext.resource.SaveOptions
import java.io.IOException
import org.eclipse.xtext.util.Strings

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MergerDslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	
System.out.println("----------------------------------ting tong--------------------------------------------------------------- ");
new MergerDslStandaloneSetup().createInjectorAndDoEMFRegistration();
val rs = new ResourceSetImpl();
val r = rs.getResource(URI.createURI("platform:/resource/persons.tasks.merger/merger/merger.mdsl"), true);System.out.println("---3");
val eobject = r.getContents().get(0); 
val node = NodeModelUtils.getNode(eobject);
System.out.println("first child Nodes.......................................................:  "+node.getText());

new MergerDslStandaloneSetup().createInjectorAndDoEMFRegistration();
val rs2 = new ResourceSetImpl();
val r2 = rs2.getResource(URI.createURI("platform:/resource/persons.tasks.merger/merger/merger2.mdsl"), true);System.out.println("---3");
val eobject2 = r2.getContents().get(0); 
val node2 = NodeModelUtils.getNode(eobject2);
System.out.println("first child Nodes2.......................................................:  "+node2.getText());

//val rs3 = new ResourceSetImpl();
val r3 = rs2.getResource(URI.createURI("platform:/resource/persons.tasks.merger/merger3/merger3.mdsl"), true);System.out.println("---3");
val eobject3 = r3.getContents().get(0); 
val node3 = NodeModelUtils.getNode(eobject3);
System.out.println("first child Nodes3.......................................................:  "+node3.getText());

//val rs3 = new ResourceSetImpl();
val r4 = rs2.getResource(URI.createURI("platform:/resource/persons.tasks.merger2/merger4/merger4.mdsl"), true);System.out.println("---3");
val eobject4 = r4.getContents().get(0); 
val node4 = NodeModelUtils.getNode(eobject4);
System.out.println("first child Nodes4.......................................................:  "+node4.getText());

val a = node.getAsTreeIterable().iterator(); 
val a3 = node3.getAsTreeIterable().iterator(); 
  //  while (a.hasNext()) 
    //{
      val o = a.next();
      val o3 = a3.next();
      System.out.println("next element in a tree:.......................................... "+o.getText());
      
     // val b = o.getAsTreeIterable().iterator(); 
       //while (b.hasNext()) 
   		//{
   			//val p = b.next();
   			//System.out.println("NEW LINE: " +Strings.convertToJavaString(o.getText(), true));
   			
    		//}
    //  if (o.getText().equals('Bob'))
      //{
      	
      	val nodeAsString = Strings.convertToJavaString(o3.getText(), true); System.out.println("nodeAsString:" +nodeAsString);
      	val startIndex=nodeAsString.indexOf( '\\r' ); System.out.println("startIndex:" +startIndex);
      	val endIndex=nodeAsString.length(); System.out.println("endIndex:" +endIndex);
      	val newString= nodeAsString.substring(startIndex+4, endIndex).replace('\\r','').replace('\\n','\n'); System.out.println("newString:" +newString);
      	val text=o.getText()+ newString;
      	val offset=node4.getOffset();
      	val length=node4.getLength();
      	//System.out.println("length:" + getLeadingWhiteSpace(o3.getText())); 
      	System.out.println("length:" +length);
      	System.out.println("offset:" +offset);
      	System.out.println("text:" +text);
      	
      	val resource1 = r4 as XtextResource;
      	resource1.update(offset,length,text);
      	  try {
   			   r4.save(SaveOptions.newBuilder().noValidation().getOptions().toOptionsMap());
  			 } 
  		  catch (IOException e) {System.out.println("EXCEPTION RAISE ON SERIALIZATION");}
      //}
      
   //} 
}

}
